//   ____            _     _               _     _   _   _  ____ ____ __  __
//  |  _ \ __ _ _ __| |_  / |_    __ _  __| | __| | | \ | |/ ___|  _ \\ \/ /
//  | |_) / _` | '__| __| | (_)  / _` |/ _` |/ _` | |  \| | |  _| |_) |\  /
//  |  __/ (_| | |  | |_  | |_  | (_| | (_| | (_| | | |\  | |_| |  _ < /  \
//  |_|   \__,_|_|   \__| |_(_)  \__,_|\__,_|\__,_| |_| \_|\____|_| \_\_/\_\
//

STEP 1 - install ngrx, create interfaces
- npm install @ngrx/store@18
- optional: npm install @ngrx/store-devtools@18
- create PersonState interface: has array of persons, and booleans for loading, loaded (optional: failed and errorMessage)
- create state interface: global state of app. contains: personState
SYNC ==> v18/step-1-finished

STEP 2 - create actions and reducers
- create directory core/store/person
- Create 2 actions: load & load-success
- create 2 reducers + initial state
SYNC ==> v18/step-2-finished

STEP 3 - integrate reducer in app
- create main reducer
- add to core module // https://ngrx.io/guide/store
- use store state in component
SYNC ==> v18/step-3-finished

STEP 4 - introduce and use sandbox
- create sandbox with loadPersons function
- add persons$ observable to sandbox, selecting the person[] from the state
- change appContainer, use sandbox instead of service. remove service (provide sandbox locally: https://angular.io/guide/providers#limiting-provider-scope-with-components)
- trigger load oninit
- test in browser


//   ____            _     ____               _           _      __  _               _           _
//  |  _ \ __ _ _ __| |_  |___ \ _   ___  ___| | ___  ___| |_   / /_| | ___ ___  ___| | ___  ___| |_
//  | |_) / _` | '__| __|   __) (_) / __|/ _ \ |/ _ \/ __| __| / / _` |/ _ \ __|/ _ \ |/ _ \/ __| __|
//  |  __/ (_| | |  | |_   / __/ _  \__ \  __/ |  __/ (__| |_ / / (_| |  __\__ \  __/ |  __/ (__| |_
//  |_|   \__,_|_|   \__| |_____(_) |___/\___|_|\___|\___|\__/_/ \__,_|\___|___/\___|_|\___|\___|\__|

// NGRX
(- Change model: create new interface SelectablePerson (extends Person) )
- Change PersonState: add 'selectedSize'
- Change load success reducer: make it an array of SelectablePerson, default not selected
- create 2 new actions: SelectPersonAction & DeselectPersonAction
- write 2 new reducer functions for this, and add to switch

SANDBOX & CONTAINER
- add 2 new methods to the sandbox: select & deselect, trigger NGRX
- add function to container to select/deselect, call sandbox method (ps: never change incoming state !!!)
- add @Output event on Person component, to toggle selection
- add button to template of Person component
- create new selector in sandbox for selectedSize
- add @Input parameter to header component, show size of selection

That's it
